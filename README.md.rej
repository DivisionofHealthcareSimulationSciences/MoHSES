--- README.md
+++ README.md
@@ -23,7 +23,7 @@ Mohses depends on several opensouce libraries which act as thirdparty dependenci
 | openssl  |  > 3.X  | [https://github.com/openssl/openssl.git]| True | Build requires perl |  
 | boost    |  > 1.8X | [https://github.com/boostorg/boost.git] | True | |  
 | tinyxml2 |  > 8.1.0 | [https://github.com/leethomason/tinyxml2.git]| True |
-| foonathan_memory | v0.7-3 | [https://github.com/foonathan/memory.git]| Flase | Use ThirdParty/Fetch |
+| foonathan_memory | v0.7-3 | [https://github.com/foonathan/memory.git]| False | Use ThirdParty/Fetch |
 | sqlite3 | N/A | [https://github.com/azadkuh/sqlite-amalgamation.git]| True |  
 | fastcdr | v1.0.27 | [https://github.com/eProsima/Fast-CDR.git]| False |
 | fastddr | v2.10.0 | [https://github.com/eProsima/Fast-DDS.git]| False |
@@ -45,12 +45,12 @@ base distributions.  If you need simple explanation of our build system skip to
 
 ```bash
     $ sudo apt install git build-essential ninja-build meson xsdcxx cmake-curses-gui
-    $ git clone git@github.com:StevenAWhite/Mohses_Refactor.git Mohses
-    $ mkdir -p Mohses/build-x86_64-linux-gnu
+    $ git clone https://github.com/StevenAWhite/Mohses_Refactor Mohses
+    $ mkdir -p Mohses/build
 
 ```
 
-This will install gcc, g++, ninja, menson, and cmake.  You can build mohses against clang
+This will install gcc, g++, ninja, meson, and cmake.  You can build mohses against clang
 using clang, but that is outside of scope these instructions.  
 
 ### 2) Option 1: Using MOHSES_FETCH_THIRDPARTY=ON 
@@ -65,41 +65,41 @@ above mentioned third party libraries and install them in the users home directo
 
 
 ```bash
-    $ sudo apt libssl-dev libboost-all-dev libz-dev
+    $ sudo apt install libssl-dev libboost-all-dev libz-dev
     $ cmake -G Ninja -D CMAKE_INSTALL_PREFIX=/home/amm/usr/ \
                      -D MOHSES_FETCH_THIRDPARTY=ON  \
-                     -B Mohses/build-x86_64-linux-gnu \
+                     -B Mohses/build \
                      -S Mohses/
-   $ cmake --build Mohses/build-x86_64-linux-gnu 
+   $ cmake --build Mohses/build 
 ```
 Note that the underlying Function ExternalProject_Add automatically installs packages in the value of
 CMAKE_INSTALL_PREFIX so no install target needs to be called in this example check /home/amm/usr to view
 the additonal dependencies. 
 
-### 3) Option 2: Apt base dependency isntalls
+### 3) Option 2: Apt base dependency installs
 
 Mohses has a very specific depency for fastddr and biogears. In this example we install all
 but FastCDR/FASTDDR and BioGears using apt. Then use MOHSES_FETCH_THIRDPARTY to simplify the building of
 BioGears and FastDDR.
 
 ```bash
-    $ sudo apt libssl-dev libboost-all-dev libz-dev
+    $ sudo apt install libssl-dev libboost-all-dev libz-dev
     $ sudo apt install libtinyxml2-dev libfoonathan-memory-dev \
                        libsqlite3-dev rapidjson-dev \
                         libxerces-c-dev libeigen3-dev
     $ cmake -G Ninja -D CMAKE_INSTALL_PREFIX=/home/amm/usr/ \
                      -D MOHSES_FETCH_THIRDPARTY=ON  \
-                     -B Mohses/build-x86_64-linux-gnu \
+                     -B Mohses/build \
                      -S Mohses
-    $ cmake --build Mohses/build-x86_64-linux-gnu
+    $ cmake --build Mohses/build
 ```
 
 If you wanted to build FastCDR, FastDDR, Pistache, BioGears yourself. You would simply set the 
 CMAKE_PREFIX_PATH variable to include the INSTALL_ROOT of the installations. For example if a previous
 user had placed the dependecies in `/home/amm/usr` passing `-D CMAKE_PREFIX_PATH=/home/amm/usr` to the cmake
-configuration would allow it to find all the dependcies.  For Cross compile set `-D CMAKE_FIND_ROOT_PATH=/home/amm/cross-sysroot`
-in stead assuming /home/amm/cross-sysroot is the location of the cross-compiled dependencies. You can use `CMAKE_TOOLCHAIN_FILE` 
-when `MOHSES_FETCH_THIRDPARTY=ON` to instruct CMAKE To cross compile all of the dependencies and install them in your
+configuration would allow it to find all the dependcies.  For cross compilation set `-D CMAKE_FIND_ROOT_PATH=/home/amm/cross-sysroot`
+instead assuming /home/amm/cross-sysroot is the location of the cross-compiled dependencies. You can use `CMAKE_TOOLCHAIN_FILE` 
+when `MOHSES_FETCH_THIRDPARTY=ON` to instruct CMAKE to cross compile all of the dependencies and install them in your
 `CMAKE_INSTALL_PREFIX`
 
 ### 4) Building Mohses Libraries
@@ -111,16 +111,16 @@ In this example we will install mohses in `/home/amm/mohses`
 ```bash
     $ cmake -G Ninja -D CMAKE_INSTALL_PREFIX=/home/amm/mohses/ \
                      -D MOHSES_FETCH_THIRDPARTY=OFF  \
-                     -B Mohses/build-x86_64-linux-gnu \
+                     -B Mohses/build \
                      -S Mohses
-    $ cmake --build Mohses/build-x86_64-linux-gnu
+    $ cmake --build Mohses/build
 ```
 
 ## Cross Compilation
 
 CMake makes targeting non native relatively easy. To succesfully cross compile you will need
 to create a TOOLCHAIN_FILE which defines the SYSROOT location and dev tools.  For Debian based systems
-We have included a toolchain file for aarch64-linux-gnu.  The following instructions give a brief
+we have included a toolchain file for aarch64-linux-gnu.  The following instructions give a brief
 overview of cross-compiling with CMake. If you have a specific use case such as targeting Android
 , iOS or embedded targets. See your devices vendor documentation for more information.
 
@@ -166,4 +166,4 @@ overview of cross-compiling with CMake. If you have a specific use case such as
                      -S Mohses
     $ cmake --build Mohses/build-aarch64-linux-gnu
     $ cmake --build Mohses/build-aarch64-linux-gnu --target install
-```+```
